package services

import (
	"context"

	"github.com/bojanzelic/cloudflare-zero-trust-operator/api/v4alpha1"
	"github.com/go-logr/logr"
	"github.com/pkg/errors"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

//
//
//

type AccessApplicationPolicyRefMatcherService struct {
	Client client.Client
	Log    logr.Logger
}

// - Will navigate through [policyList] accessRules
// - Find named references of CRDs defined resources, which correspond to uniquely identified Cloudflare API objects (like Service Tokens, Groups...)
// - Try to find the associated Cloudflare object UUID which was generated by the API, and bind it to any accessRule which uses it
//
//nolint:gocognit
func (s *AccessApplicationPolicyRefMatcherService) PopulateWithCloudflareUUIDs(
	ctx context.Context,
	policyRulersList []v4alpha1.GenericAccessPolicyRuler,
) error {
	for _, policyRuler := range policyRulersList {
		include := policyRuler.GetInclude()
		exclude := policyRuler.GetExclude()
		require := policyRuler.GetRequire()

		managedCFRules := []*v4alpha1.CloudFlareAccessRules{
			&include,
			&exclude,
			&require,
		}

		for _, rulesType := range managedCFRules {
			for i, group := range rulesType.AccessGroups { //nolint:varnamelen
				if group.ValueFrom != nil {
					accessGroup := &v4alpha1.CloudflareAccessGroup{}
					if err := s.Client.Get(ctx, group.ValueFrom.ToNamespacedName(), accessGroup); err != nil {
						return errors.Wrapf(err, "unable to reference CloudflareAccessGroup %s - %s", group.ValueFrom.Name, group.ValueFrom.Namespace)
					}

					(*rulesType).AccessGroups[i].Value = accessGroup.Status.AccessGroupID
				}
			}

			for i, token := range rulesType.ServiceTokens { //nolint:varnamelen
				if token.ValueFrom != nil {
					serviceToken := &v4alpha1.CloudflareServiceToken{}
					if err := s.Client.Get(ctx, token.ValueFrom.ToNamespacedName(), serviceToken); err != nil {
						return errors.Wrapf(err, "unable to reference CloudflareServiceToken %s - %s", token.ValueFrom.Name, token.ValueFrom.Namespace)
					}

					(*rulesType).ServiceTokens[i].Value = serviceToken.Status.ServiceTokenID
				}
			}
		}
	}

	return nil
}
